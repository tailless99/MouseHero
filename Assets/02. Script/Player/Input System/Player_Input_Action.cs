//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.0
//     from Assets/02. Script/Player/Input System/Player_Input_Action.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/02. Script/Player/Input System/Player_Input_Action.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Player_Input_Action: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Player_Input_Action()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Input_Action"",
    ""maps"": [
        {
            ""name"": ""Attack"",
            ""id"": ""7e439e6c-6cfe-496c-8460-102433deeace"",
            ""actions"": [
                {
                    ""name"": ""Z"",
                    ""type"": ""Button"",
                    ""id"": ""66568036-c3b9-47ef-beb7-b4427f575217"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""4ccc7415-8ad4-4cd3-be33-f118cc6b7274"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""5b2687c8-8a3f-4def-b720-a4146ca444e7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73327ef9-e635-4e47-bcd4-1819680828c6"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e29f6cc5-996b-4094-90b5-0c49de76bfe0"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""976cbf81-f973-4575-8599-1a9ead900fd9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OpenUI"",
            ""id"": ""dc2e5254-4589-428e-b1e1-36cb01a55ef3"",
            ""actions"": [
                {
                    ""name"": ""Status"",
                    ""type"": ""Button"",
                    ""id"": ""98d89381-2ae6-4f7c-a9d6-d0112e58c503"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""76f0e72e-d861-4007-8d39-5d0494cbf734"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf2bf4f2-e28b-43ee-8219-b2a447005975"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Status"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b1e4a8e-52b6-4781-b9da-a5d27d747c5d"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Skill"",
            ""id"": ""c322ddd5-ee39-4046-b6de-84645f87a374"",
            ""actions"": [
                {
                    ""name"": ""Use_SkillA"",
                    ""type"": ""Button"",
                    ""id"": ""c705c2f8-56a0-4ecd-ac72-bf4b95ec1b29"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use_SkillB"",
                    ""type"": ""Button"",
                    ""id"": ""14b86a61-b0ce-45ec-9710-0c367c774009"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use_SkillC"",
                    ""type"": ""Button"",
                    ""id"": ""9f0d7223-d375-4214-a951-c60989a70609"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AddSkill"",
                    ""type"": ""Button"",
                    ""id"": ""5a1caaf5-c665-4a5d-bc8a-77e0ecf61e70"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84df861e-9505-4c77-9687-93a88008009a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use_SkillA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4214113b-8d88-4793-8f8b-db11b2540e8e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use_SkillB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9822e8b3-cb63-440e-bd20-2ed59d5429a9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use_SkillC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e4b3db3-1c11-496a-9f24-a4f6d2d88db7"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_Z = m_Attack.FindAction("Z", throwIfNotFound: true);
        m_Attack_X = m_Attack.FindAction("X", throwIfNotFound: true);
        m_Attack_LeftMouse = m_Attack.FindAction("Left Mouse", throwIfNotFound: true);
        // OpenUI
        m_OpenUI = asset.FindActionMap("OpenUI", throwIfNotFound: true);
        m_OpenUI_Status = m_OpenUI.FindAction("Status", throwIfNotFound: true);
        m_OpenUI_Inventory = m_OpenUI.FindAction("Inventory", throwIfNotFound: true);
        // Skill
        m_Skill = asset.FindActionMap("Skill", throwIfNotFound: true);
        m_Skill_Use_SkillA = m_Skill.FindAction("Use_SkillA", throwIfNotFound: true);
        m_Skill_Use_SkillB = m_Skill.FindAction("Use_SkillB", throwIfNotFound: true);
        m_Skill_Use_SkillC = m_Skill.FindAction("Use_SkillC", throwIfNotFound: true);
        m_Skill_AddSkill = m_Skill.FindAction("AddSkill", throwIfNotFound: true);
    }

    ~@Player_Input_Action()
    {
        UnityEngine.Debug.Assert(!m_Attack.enabled, "This will cause a leak and performance issues, Player_Input_Action.Attack.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OpenUI.enabled, "This will cause a leak and performance issues, Player_Input_Action.OpenUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Skill.enabled, "This will cause a leak and performance issues, Player_Input_Action.Skill.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Attack
    private readonly InputActionMap m_Attack;
    private List<IAttackActions> m_AttackActionsCallbackInterfaces = new List<IAttackActions>();
    private readonly InputAction m_Attack_Z;
    private readonly InputAction m_Attack_X;
    private readonly InputAction m_Attack_LeftMouse;
    /// <summary>
    /// Provides access to input actions defined in input action map "Attack".
    /// </summary>
    public struct AttackActions
    {
        private @Player_Input_Action m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public AttackActions(@Player_Input_Action wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Attack/Z".
        /// </summary>
        public InputAction @Z => m_Wrapper.m_Attack_Z;
        /// <summary>
        /// Provides access to the underlying input action "Attack/X".
        /// </summary>
        public InputAction @X => m_Wrapper.m_Attack_X;
        /// <summary>
        /// Provides access to the underlying input action "Attack/LeftMouse".
        /// </summary>
        public InputAction @LeftMouse => m_Wrapper.m_Attack_LeftMouse;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="AttackActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="AttackActions" />
        public void AddCallbacks(IAttackActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackActionsCallbackInterfaces.Add(instance);
            @Z.started += instance.OnZ;
            @Z.performed += instance.OnZ;
            @Z.canceled += instance.OnZ;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @LeftMouse.started += instance.OnLeftMouse;
            @LeftMouse.performed += instance.OnLeftMouse;
            @LeftMouse.canceled += instance.OnLeftMouse;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="AttackActions" />
        private void UnregisterCallbacks(IAttackActions instance)
        {
            @Z.started -= instance.OnZ;
            @Z.performed -= instance.OnZ;
            @Z.canceled -= instance.OnZ;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @LeftMouse.started -= instance.OnLeftMouse;
            @LeftMouse.performed -= instance.OnLeftMouse;
            @LeftMouse.canceled -= instance.OnLeftMouse;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="AttackActions.UnregisterCallbacks(IAttackActions)" />.
        /// </summary>
        /// <seealso cref="AttackActions.UnregisterCallbacks(IAttackActions)" />
        public void RemoveCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="AttackActions.AddCallbacks(IAttackActions)" />
        /// <seealso cref="AttackActions.RemoveCallbacks(IAttackActions)" />
        /// <seealso cref="AttackActions.UnregisterCallbacks(IAttackActions)" />
        public void SetCallbacks(IAttackActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="AttackActions" /> instance referencing this action map.
    /// </summary>
    public AttackActions @Attack => new AttackActions(this);

    // OpenUI
    private readonly InputActionMap m_OpenUI;
    private List<IOpenUIActions> m_OpenUIActionsCallbackInterfaces = new List<IOpenUIActions>();
    private readonly InputAction m_OpenUI_Status;
    private readonly InputAction m_OpenUI_Inventory;
    /// <summary>
    /// Provides access to input actions defined in input action map "OpenUI".
    /// </summary>
    public struct OpenUIActions
    {
        private @Player_Input_Action m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public OpenUIActions(@Player_Input_Action wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "OpenUI/Status".
        /// </summary>
        public InputAction @Status => m_Wrapper.m_OpenUI_Status;
        /// <summary>
        /// Provides access to the underlying input action "OpenUI/Inventory".
        /// </summary>
        public InputAction @Inventory => m_Wrapper.m_OpenUI_Inventory;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_OpenUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="OpenUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(OpenUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="OpenUIActions" />
        public void AddCallbacks(IOpenUIActions instance)
        {
            if (instance == null || m_Wrapper.m_OpenUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OpenUIActionsCallbackInterfaces.Add(instance);
            @Status.started += instance.OnStatus;
            @Status.performed += instance.OnStatus;
            @Status.canceled += instance.OnStatus;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="OpenUIActions" />
        private void UnregisterCallbacks(IOpenUIActions instance)
        {
            @Status.started -= instance.OnStatus;
            @Status.performed -= instance.OnStatus;
            @Status.canceled -= instance.OnStatus;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="OpenUIActions.UnregisterCallbacks(IOpenUIActions)" />.
        /// </summary>
        /// <seealso cref="OpenUIActions.UnregisterCallbacks(IOpenUIActions)" />
        public void RemoveCallbacks(IOpenUIActions instance)
        {
            if (m_Wrapper.m_OpenUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="OpenUIActions.AddCallbacks(IOpenUIActions)" />
        /// <seealso cref="OpenUIActions.RemoveCallbacks(IOpenUIActions)" />
        /// <seealso cref="OpenUIActions.UnregisterCallbacks(IOpenUIActions)" />
        public void SetCallbacks(IOpenUIActions instance)
        {
            foreach (var item in m_Wrapper.m_OpenUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OpenUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="OpenUIActions" /> instance referencing this action map.
    /// </summary>
    public OpenUIActions @OpenUI => new OpenUIActions(this);

    // Skill
    private readonly InputActionMap m_Skill;
    private List<ISkillActions> m_SkillActionsCallbackInterfaces = new List<ISkillActions>();
    private readonly InputAction m_Skill_Use_SkillA;
    private readonly InputAction m_Skill_Use_SkillB;
    private readonly InputAction m_Skill_Use_SkillC;
    private readonly InputAction m_Skill_AddSkill;
    /// <summary>
    /// Provides access to input actions defined in input action map "Skill".
    /// </summary>
    public struct SkillActions
    {
        private @Player_Input_Action m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SkillActions(@Player_Input_Action wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Skill/Use_SkillA".
        /// </summary>
        public InputAction @Use_SkillA => m_Wrapper.m_Skill_Use_SkillA;
        /// <summary>
        /// Provides access to the underlying input action "Skill/Use_SkillB".
        /// </summary>
        public InputAction @Use_SkillB => m_Wrapper.m_Skill_Use_SkillB;
        /// <summary>
        /// Provides access to the underlying input action "Skill/Use_SkillC".
        /// </summary>
        public InputAction @Use_SkillC => m_Wrapper.m_Skill_Use_SkillC;
        /// <summary>
        /// Provides access to the underlying input action "Skill/AddSkill".
        /// </summary>
        public InputAction @AddSkill => m_Wrapper.m_Skill_AddSkill;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Skill; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SkillActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SkillActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SkillActions" />
        public void AddCallbacks(ISkillActions instance)
        {
            if (instance == null || m_Wrapper.m_SkillActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SkillActionsCallbackInterfaces.Add(instance);
            @Use_SkillA.started += instance.OnUse_SkillA;
            @Use_SkillA.performed += instance.OnUse_SkillA;
            @Use_SkillA.canceled += instance.OnUse_SkillA;
            @Use_SkillB.started += instance.OnUse_SkillB;
            @Use_SkillB.performed += instance.OnUse_SkillB;
            @Use_SkillB.canceled += instance.OnUse_SkillB;
            @Use_SkillC.started += instance.OnUse_SkillC;
            @Use_SkillC.performed += instance.OnUse_SkillC;
            @Use_SkillC.canceled += instance.OnUse_SkillC;
            @AddSkill.started += instance.OnAddSkill;
            @AddSkill.performed += instance.OnAddSkill;
            @AddSkill.canceled += instance.OnAddSkill;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SkillActions" />
        private void UnregisterCallbacks(ISkillActions instance)
        {
            @Use_SkillA.started -= instance.OnUse_SkillA;
            @Use_SkillA.performed -= instance.OnUse_SkillA;
            @Use_SkillA.canceled -= instance.OnUse_SkillA;
            @Use_SkillB.started -= instance.OnUse_SkillB;
            @Use_SkillB.performed -= instance.OnUse_SkillB;
            @Use_SkillB.canceled -= instance.OnUse_SkillB;
            @Use_SkillC.started -= instance.OnUse_SkillC;
            @Use_SkillC.performed -= instance.OnUse_SkillC;
            @Use_SkillC.canceled -= instance.OnUse_SkillC;
            @AddSkill.started -= instance.OnAddSkill;
            @AddSkill.performed -= instance.OnAddSkill;
            @AddSkill.canceled -= instance.OnAddSkill;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SkillActions.UnregisterCallbacks(ISkillActions)" />.
        /// </summary>
        /// <seealso cref="SkillActions.UnregisterCallbacks(ISkillActions)" />
        public void RemoveCallbacks(ISkillActions instance)
        {
            if (m_Wrapper.m_SkillActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SkillActions.AddCallbacks(ISkillActions)" />
        /// <seealso cref="SkillActions.RemoveCallbacks(ISkillActions)" />
        /// <seealso cref="SkillActions.UnregisterCallbacks(ISkillActions)" />
        public void SetCallbacks(ISkillActions instance)
        {
            foreach (var item in m_Wrapper.m_SkillActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SkillActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SkillActions" /> instance referencing this action map.
    /// </summary>
    public SkillActions @Skill => new SkillActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Attack" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="AttackActions.AddCallbacks(IAttackActions)" />
    /// <seealso cref="AttackActions.RemoveCallbacks(IAttackActions)" />
    public interface IAttackActions
    {
        /// <summary>
        /// Method invoked when associated input action "Z" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnZ(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "X" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnX(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Left Mouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftMouse(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "OpenUI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="OpenUIActions.AddCallbacks(IOpenUIActions)" />
    /// <seealso cref="OpenUIActions.RemoveCallbacks(IOpenUIActions)" />
    public interface IOpenUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "Status" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStatus(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Inventory" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInventory(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Skill" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SkillActions.AddCallbacks(ISkillActions)" />
    /// <seealso cref="SkillActions.RemoveCallbacks(ISkillActions)" />
    public interface ISkillActions
    {
        /// <summary>
        /// Method invoked when associated input action "Use_SkillA" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUse_SkillA(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Use_SkillB" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUse_SkillB(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Use_SkillC" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUse_SkillC(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AddSkill" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAddSkill(InputAction.CallbackContext context);
    }
}
